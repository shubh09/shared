#include <iostream>#include <vector>#include <cstdio>#include <cstring>#include <string>#include <cmath>#include <algorithm>#include <utility>using namespace std;#define FOR(i,a,b)				for (i=a;i<b;i++)#define s(n)					scanf("%d",&n)#define p(n)					printf("%d\n",n)#define pl(n)					printf("%lld\n",n)#define sd(n)					int n;scanf("%d",&n)#define sl(n)					scanf("%lld",&n)#define sld(n)					long long int n;scanf("%lld",&n)typedef long long ll;class RestaurantManager{ public:       int allocateTables(vector <int> tables, vector <int> g,vector <int> arr,vector <int> dep)  {      int s1=tables.size();      sort(tables.begin(),tables.end());      vector <bool> occt(s1,false);      int s2=g.size();      vector <int> occ(s2,-1);      int i,j;      int ans=0;      FOR(i,0,s2)      {          FOR(j,0,s2)          {              if (occ[j]!=-1&&dep[j]<=arr[i])              {                  //de-occupy the table                  occt[occ[j]]=0;                  occ[j]=-1;              }          }          //find the table          FOR(j,0,s1)          {              if (tables[j]>=g[i]&&occt[j]==0)              {                  //p(g[i]);                  //printf("%d %d\n",g[i],tables[j]);                  occt[j]=1;                  occ[i]=j;                  break;              }//              if (tables[j]>g[i])//              {//                  ans+=g[i];//                  //p(i);//                  break;//              }          }          if (j==s1)          {              //p(i);              ans+=g[i];          }      }      return ans;  }};//for testingint main(){    RestaurantManager cls;    int t=1;    int i,j;    vector <int> tables,g,arr,dep;    FOR(i,0,t)    {        printf("here");        sd(n);        sd(m);        tables.clear();arr.clear();dep.clear();g.clear();        FOR(j,0,n)        {            sd(temp);            tables.push_back(temp);        }        FOR(j,0,m)        {            sd(temp);            g.push_back(temp);        }        FOR(j,0,m)        {            sd(temp);            arr.push_back(temp);        }        FOR(j,0,m)        {            sd(temp);            dep.push_back(temp);        }        p(cls.allocateTables(tables,g,arr,dep));    }}